// Generated by CoffeeScript 1.7.0
(function() {
  var Promise, browserify, buildPages, buildScripts, buildStyles, compileTemplates, copyFontAwesome, copyImages, exec, fs, glob, less, log, mkdirp, moment, path, rimraf, rsvp, signalDone, signalError, startBuild, uglifyify, _;

  fs = require('fs');

  mkdirp = require('mkdirp');

  rimraf = require('rimraf');

  rsvp = require('rsvp');

  _ = require('lodash');

  browserify = require('browserify');

  glob = require('glob');

  path = require('path');

  Promise = rsvp.Promise;

  less = require('less');

  uglifyify = require('uglifyify');

  exec = require('child_process').exec;

  moment = require('moment');

  log = require('./log');

  buildPages = require('./build_pages');

  startBuild = function(ctx) {
    ctx.startedAt = moment();
    return new Promise(function(resolve, reject) {
      log.debug("Starting build");
      mkdirp.sync(ctx.args.buildDir);
      mkdirp.sync(ctx.args.tmpDir);
      _.each(['css', 'js', 'fonts', 'images'], function(dir) {
        return mkdirp.sync("" + ctx.args.buildDir + "/" + dir);
      });
      return resolve(ctx);
    });
  };

  compileTemplates = function(ctx) {
    return new Promise(function(resolve, reject) {
      var cmd, compiler;
      log.debug("Started compiling templates");
      compiler = path.resolve("" + __dirname + "/../node_modules/.bin/haml-coffee");
      cmd = "" + compiler + " -i " + ctx.args.srcDir + " -o " + ctx.args.tmpDir + "/templates.jst -n module.exports -b";
      return exec(cmd, function(err, output) {
        if (err) {
          return reject(err);
        } else {
          log.debug("Finished compiling templates");
          return resolve(ctx);
        }
      });
    });
  };

  buildScripts = function(ctx) {
    return new Promise(function(resolve, reject) {
      var bundle;
      log.debug("Started scripts");
      bundle = browserify({
        entries: ["" + ctx.args.srcDir + "/" + ctx.args.mainScript],
        extensions: ['.jst', '.coffee']
      });
      bundle.transform(require('coffeeify'));
      if (ctx.args.compress) {
        bundle.transform(require('uglifyify'));
      }
      bundle.transform(require('debowerify'));
      return bundle.bundle(function(err, src) {
        if (err) {
          return reject(err);
        } else {
          fs.writeFileSync("" + ctx.args.buildDir + "/js/all.js", src);
          log.debug("Finished scripts");
          return resolve(ctx);
        }
      });
    });
  };

  buildStyles = function(ctx) {
    return new Promise(function(resolve, reject) {
      var files, parser, src;
      log.debug("Started styles");
      files = glob.sync("" + ctx.args.srcDir + "/**/*.+(less|css)");
      src = _.reduce(files, function(src, path) {
        return src + fs.readFileSync(path);
      }, '');
      parser = new less.Parser({
        paths: [ctx.args.srcDir, ctx.args.bowerDir],
        filename: 'bundle.less'
      });
      return parser.parse(src, function(err, tree) {
        var css;
        if (err) {
          return reject(err);
        } else {
          css = tree.toCSS({
            compress: ctx.args.compress
          });
          fs.writeFileSync("" + ctx.args.buildDir + "/css/all.css", css);
          log.debug("Finished styles");
          return resolve(ctx);
        }
      });
    });
  };

  copyFontAwesome = function(ctx) {
    return new Promise(function(resolve, reject) {
      var dst, faDir, src;
      faDir = "" + ctx.args.bowerDir + "/font-awesome";
      if (fs.existsSync(faDir)) {
        log.debug("Started copying font-awesome");
        src = "" + faDir + "/fonts/*";
        dst = "" + ctx.args.buildDir + "/fonts/";
        return exec("cp " + src + " " + dst, function(err, out) {
          if (err) {
            return reject(err);
          } else {
            log.debug("Finished copying font-awesome");
            return resolve(ctx);
          }
        });
      } else {
        return resolve(ctx);
      }
    });
  };

  copyImages = function(ctx) {
    return new Promise(function(resolve, reject) {
      var images, promises;
      log.debug("Started copying images");
      images = glob.sync("" + ctx.args.srcDir + "/**/*.+(jpg|png)");
      promises = _.map(images, function(file) {
        return new Promise(function(resolve, reject) {
          var dst, relPath;
          relPath = path.relative(ctx.args.srcDir, file);
          dst = "" + ctx.args.buildDir + "/images/" + (path.dirname(relPath));
          return exec("mkdir -p " + dst + " && cp " + file + " " + dst, function(err) {
            if (err) {
              return reject(err);
            } else {
              return resolve();
            }
          });
        });
      });
      if (promises.length > 0) {
        return rsvp.all(promises).then(function() {
          log.debug("Finished copying images");
          return resolve(ctx);
        });
      } else {
        log.debug("No images found");
        return resolve(ctx);
      }
    });
  };

  signalDone = function(ctx) {
    return new Promise(function(resolve, reject) {
      log("Build finished in " + (moment().diff(ctx.startedAt)) + "ms");
      return resolve(ctx);
    });
  };

  signalError = function(err) {
    return log("Error building", err, err.stack);
  };

  module.exports = {
    run: function(args) {
      return startBuild({
        args: args
      }).then(function(ctx) {
        return compileTemplates(ctx);
      }).then(function(ctx) {
        return new Promise(function(resolve, reject) {
          var steps;
          steps = rsvp.all(_.map([buildScripts, buildStyles, copyFontAwesome, copyImages], function(fn) {
            return fn(ctx);
          }));
          steps.then(function() {
            return resolve(ctx);
          });
          return steps.then(null, reject);
        });
      }).then(function(ctx) {
        return buildPages(ctx);
      }).then(function(ctx) {
        return signalDone(ctx);
      }).then(null, function(err) {
        return signalError(err);
      });
    }
  };

}).call(this);
