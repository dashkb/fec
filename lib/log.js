// Generated by CoffeeScript 1.10.0
(function() {
  var _, createLogFns, inspect, log, moment, n, opts, timestamp,
    slice = [].slice;

  _ = require('lodash');

  inspect = require('util').inspect;

  moment = require('moment');

  opts = {
    timeFormat: "HH:mm:ss",
    defaultLevel: 'info',
    threshold: 'debug',
    levels: ['trace', 'debug', 'info', 'warn', 'error'],
    disabled: false
  };

  n = function(level) {
    return opts.levels.indexOf(level);
  };

  timestamp = function() {
    return moment().format(opts.timeFormat);
  };

  createLogFns = function() {
    return _.reduce(opts.levels, function(fns, level) {
      fns[level] = function() {
        var msg;
        msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        msg = _.map(msg, function(item) {
          if (typeof item === 'string') {
            return item;
          } else {
            return inspect(item);
          }
        });
        if (n(level) >= n(opts.threshold) && !opts.disabled) {
          return console.log((timestamp()) + " " + (msg.join()));
        }
      };
      return fns;
    }, {});
  };

  log = function() {
    var msg;
    msg = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return log[opts.defaultLevel].apply(log, msg);
  };

  _.extend(log, createLogFns(), {
    setThreshold: function(threshold) {
      return opts.threshold = threshold;
    },
    setLevels: function() {
      var levels;
      levels = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      _.each(opts.levels, function(level) {
        return delete log[level];
      });
      opts.levels = levels;
      return _.extend(log, createLogFns());
    }
  });

  log.timePromise = function(p, msg, level) {
    var start;
    if (level == null) {
      level = 'debug';
    }
    start = moment();
    p.then(function() {
      return log[level](msg + " " + (moment().diff(start)) + "ms");
    }).then(null, function() {
      return log[level](msg + " failed " + (moment().diff(start)) + "ms");
    });
    return p;
  };

  log.disable = function() {
    return opts.disabled = true;
  };

  module.exports = log;

}).call(this);
